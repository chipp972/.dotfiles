# CoffeeScript #

## Project ##
To use CoffeeScript in a project use `npm install --save coffee-script`
# TODO set up with source maps, tests and execute files

## Comments and Annotations ##
```
instruction # this is an inline comment
# comment
# FIXME annotation exemple

###
Block comment : kept in the generated javascript
###
```

*   __TODO__: describe missing functionality that should be added at a later date
*   __FIXME__: describe broken code that must be fixed
*   __OPTIMIZE__: describe code that is inefficient and may become a bottleneck
*   __HACK__: describe the use of a questionable (or ingenious) coding practice
*   __REVIEW__: describe code that should be reviewed to confirm implementation


## I/O ##
```
alert 'string' # front-end output
console.log 'string' # back-end output
```


## Aliases and Operators ##
CoffeeScript   | Javascript
---------------|-----------
is             | ===
isnt           | !==
not	           | !
and	           | &&
or             | I I
true, yes, on  | true
false, no, off | false
@, this	       | this
of	           | in
in	           | no JS equivalent
a ** b	       | Math.pow(a, b)
a // b	       | Math.floor(a / b)
a %% b	       | (a % b + b) % b
until          | while not
loop           | while true

```
# Test the existence of a property
# return undined if method doesn't exist
obj.method?()
obj.field?
```

## Variables ##
```
var1 = 42
bool = true
```


## Conditions ##
```
var1 = 2 unless ended
var2 = 42 if bool

# if var2 doesn't exists
var3 = var1 if not var2?

var3 ?= 12 # if var3 is null var3 = 12

# if var7 is not undefined var4 = var7 else var4 = 'thing2'
var4 = var7 ? 'thing2'

lifeActivities = ->
  if today isnt 'sunday' then sleep() else work()

# condition block
if cond
  ...
else
  ...

healthy = 200 > cholesterol > 60 # chained comparison

supply = 0
demand = 100
sell() until supply > demand

# switch
switch day
  when "Mon" then go work
  when "Tue" then go relax
  when "Thu" then go iceFishing
  when "Fri", "Sat"
    if day is bingoDay
      go bingo
      go dancing
  when "Sun" then go church
  else go work

score = 76
grade = switch
  when score < 60 then 'F'
  when score < 70 then 'D'
  when score < 80 then 'C'
  when score < 90 then 'B'
  else 'A'
# grade == 'C'
```

## Arrays ##
```
li = [1, 2, 3, 4]

# inclusive [0 -> 3]
li = [0..3]

# exclusive [0 -> 3[
li = [0...3]

# generate a list with 50 elements
# map : apply the function to each element
# concat : concatenate the list with the arg
# filter : apply the filter to each element and return a list
# reduce : apply the function given in parameter to the two
# first elements then take the result and continue with the rest
li2 = [1..100] by 2
  .map((x) -> x * x)
  .concat([10..12])
  .filter((x) -> x < 11)
  .reduce((x, y) -> x + y)

cubes = (funName x for x in li) # == li.map(funName)

li3 = [
  1, 2
  4, 3
]
```


## Loops and Comprehensions ##
```
# construct a list from another list
res = (item.name for item in array)

# filter elements
res = (item for item in array when item.name is 'test')

# iterate over keys and values : "of" for objects and "in" for arrays
alert("#{key} = #{value}") for key, value of obj

# if you don't need the iteration value
fun1() for [0..count]
```


## String ##
Conventions
*   ' ' for constants
*   " " for interpolation
*   """ """ for block strings
```
# Block string : better to keep indentation and apostrophe
"""
    <p>
        <a>
            test
        </a>
    </p>
"""
# Interpolation
name = 'alex'
"my name is #{name}"
```

## Regular Expressions ##
```
# simple regular expression


# block regular expression
OPERATOR = /// ^ (
  ?: [-=]>             # function
   | [-+*/%<>&|^!?=]=  # compound assign / compare
   | >>>=?             # zero-fill right shift
   | ([-+:])\1         # doubles
   | ([&|<>])\2=?      # logic / shift
   | \?\.              # soak access
   | \.{2,3}           # range or splat
) ///
```


## Functions ##
```
oneLineFun = (arg1 = 32, arg2 = 12) -> arg1 * arg2

noArgFun = -> #instructions

multiLineFun = (args) ->
  # instruction1
  # instruction
  x * x # return automatically the result of the last statment

variableArgFun = (arg1, arg2...) ->
  # instructions

# calling a function
noArgFun()
funName arg1 arg2

# wrap a function in a closure with do keyword
for filename in list
  do (filename) ->
    fs.readFile filename, (err, contents) ->
      compile filename, contents.toString()
```


## Objects ##
```
objName =
  field1: 42
  field2: funName
  field3: (args) -> args * args
  _privateField: (arg...) ->
    return 42 if arg < 0
    arg * 2 # returned automatically
  fieldObj:
    fieldObj1: 34
    fieldObj2: -> 34*10

obj2 = {name: 'titi', color: 'yellow'}
```


## Exceptions ##

```
try
  fun1()
  fun2()
catch error
  print error
finally
  cleanUp()
```

## Classes ##
```
class Animal
  constructor: (@name) -> # this.constructor.name = 'Animal'

  move: (meters) ->
    alert @name + " moved #{meters}m."

class Snake extends Animal
  move: ->
    alert 'Slithering...'
    super 5

class Horse extends Animal
  move: ->
    alert 'Galoping...'
    super 45

sam = new Snake 'Sammy'
ben = new Horse 'Ben'

sam.move()
ben.move()
```


## Destructuring Assignments ##
```
# switch array content
[field0, field1] = [field1, field0]

# Assign the result of a function that returns an array of values
[city, temp, forecast] = weatherReport 'Paris, France'

# combine with splats
[open, contents..., close] = file.split " "

# combine with splats without assigning the values
[..., last] = file.split " "

# Assign properties
class Person
  constructor: (options) ->
    {@name, @age, @height = 'average'} = options

tim = new Person name: 'Tim', age: 4
```


## Bound Functions ##
```
# => define a function and bind it to the current context to permits
# the function to access locale variable of the context
Account = (customer, cart) ->
  @customer = customer
  @cart = cart

  $('.shopping_cart').on 'click', (event) =>
    @customer.purchase @cart # without the => customer is window.customer and is undefined
```

## Generator Functions ##
```
# functions that returns values multiple times (like a for-each)
perfectSquares = ->
  num = 0
  loop
    num += 1
    yield num * num
  return

window.ps or= perfectSquares()
```


## Embedded Javascript ##

```
hi = `function() {
  return [document.title, "Hello JavaScript"].join(": ");
}`
```
