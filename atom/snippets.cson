# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

'.source.c':
    'File Header':
        'prefix': 'header'
        'body': """
/**
 * ${1:Domain} TP${2:n}
 * Nom    : PIERRE-CHARLES
 * Pr√©nom : Nicolas
 * E-mail : pierrecharles.nicolas@gmail.com
 * Desc   : ${3:Description}
 */
"""
    'for Loop':
        'prefix': 'for'
        'body': """for (${1:i} = 0; ${1:i} < ${2:count}; ${1:i}${3:++}) {
            ${4://code}
        }"""
	'Switch Statement':
		'prefix': 'switch'
		'body': """switch (${1:arg}) {
            case ${2:entry1}:
            break;
            case ${3:entry2}:
            break;
            case ${4:entry3}:
            break;
            default:
            break;
        }"""

'.source.java':
	'System Out':
		'prefix': 'System.out.println'
		'body': "System.out.println(\"${1:test}\");$2"
	'System Exit':
		'prefix': 'System.out.exit'
		'body': "System.exit(${1:1});$2"
	'Try catch':
		'prefix': 'try'
		'body': """
		try {
			${1://instructions}
		} catch (${2:Exception} e) {
			e.printStackTrace();
		}$3
		"""
	'Iterator list':
		'prefix': 'list Iterator'
		'body': """
		public void list${1:<E>}() {
			Iterator${1:<E>} it = ${2:listName}.iterator();
			if (${2:listName}.isEmpty()) {
				System.out.println("${3:Vide");
			} else {
				while (it.hasNext())
					System.out.println(it.next());
			}
		}
		"""
	'Switch':
		'prefix': 'switch'
		'body': """
		switch (${1:arg}) {
		case ${2:entry1}:
		break;
		case ${3:entry2}:
		break;
		case ${4:entry3}:
		break;
		default:
		break;
		}
		"""
	'Class definition':
		'prefix': 'class'
		'body': """
		/* Comment to add */
		package ${1:packageName};\n
		// imports\n
		public class ${2:className} ${3:implements i1, i2...} ${4:extends c} {\n
			public ${2:className}($5) {
				$6
			}
		}
		"""
	'Enum definition':
		'prefix': 'enum'
		'body': """
		/* Comment to modify */
		package ${1:packageName};\n
		// imports\n
		public enum ${2:enumName} {\n
			public ${2:enumName}($5) {
				$6
			}
		}
		"""
